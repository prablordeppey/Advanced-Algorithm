@article{misra_gries,
	title = {Finding repeated elements},
	journal = {Science of Computer Programming},
	volume = {2},
	number = {2},
	pages = {143-152},
	year = {1982},
	issn = {0167-6423},
	doi = {https://doi.org/10.1016/0167-6423(82)90012-0},
	url = {https://www.sciencedirect.com/science/article/pii/0167642382900120},
	author = {J. Misra and David Gries},
	abstract = {Two algorithms are presented for binding the values that occur more than n ÷ k times in an array b[0:n – 1]. The second one requires time proportional to n ∗ log(k) and extra space proportional to k. A theorem suggests that this algorithm is optimal among algorithms that are based on comparing array elements. Thus, finding the element that occurs more than n ÷ 2 times requires linear time, while determining whether there is a duplicate – the case k = n – requires time proportional to n ∗ log n. The algorithms may be interesting from a standpoint of programming methodology; each was developed as an extension of the algorithm for the simple case k = 2.}
}